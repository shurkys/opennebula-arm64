name: Build and Release

permissions:
  packages: write
  contents: write  # –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ª–∏–∑–æ–≤
  checks: write
  security-events: write
  pull-requests: read
  actions: read


on:
  push:
    tags:
      - 'v*.*.*'  # –¢—Ä–∏–≥–≥–µ—Ä–∏–º –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ vX.Y.Z

jobs:
  build:
    runs-on: self-hosted
    # runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # –£—Å—Ç–∞–Ω–æ–≤–∏–º Docker Buildx –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤
      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîë Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Setup cache  for packages
      - name: ‚ö°Ô∏è Cache Docker layers for OpenNebula packages
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache-packages
          key: ${{ runner.os }}-buildx-packages-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-packages

      # –£—Å—Ç–∞–Ω–æ–≤–∏–º Docker Buildx –∏ —Å–æ–±–µ—Ä–µ–º –æ–±—Ä–∞–∑
      - name: ‚öôÔ∏è Build packages
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/packages/Dockerfile
          platforms: linux/arm64
          push: false
          tags: shurkys/opennebula-packages:${{ github.ref_name }}
          outputs: type=local,dest=./
          cache-from: type=local,src=/tmp/.buildx-cache-packages
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-packages-new

      - name: üëÄ List output directory
        run: ls -la ./packages

      # –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≤ —Ä–µ–ª–∏–∑
      - name: üöÄ Upload artifacts to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./packages/*
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
          body: "Release for version ${{ github.ref }}"

      # Setup cache  for packages
      - name: ‚ö°Ô∏è Cache Docker layers for OpenNebula images
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache-images
          key: ${{ runner.os }}-buildx-images-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-images

      - name: üöÄ Build and push OpenNebula image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/all_in_one/Dockerfile
          platforms: linux/arm64
          push: true
          tags: shurkys/opennebula-all-in-one:${{ github.ref_name }}
          cache-from: type=local,src=/tmp/.buildx-cache-images
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-images-new

      - name: üóëÔ∏è Clean output directory
        run: rm -rf ./packages

      # This ugly bit is necessary if you don't want your cache to grow forever
      # till it hits GitHub's limit of 5GB.
      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: üöö Move OpenNebula packages cache
        run: |
          rm -rf /tmp/.buildx-cache-packages
          mv /tmp/.buildx-cache-packages-new /tmp/.buildx-cache-packages
          
      - name: üöö Move OpenNebula packages images
        run: |
          rm -rf /tmp/.buildx-cache-images
          mv /tmp/.buildx-cache-images-new /tmp/.buildx-cache-images

  # scan:
  #   runs-on: ubuntu-latest
  #   # needs: build
  #   steps:
  #     - name: ‚¨áÔ∏è Checkout repo
  #       uses: actions/checkout@v4

  #     - name: üõ°Ô∏è Scan Docker image with Trivy
  #       uses: aquasecurity/trivy-action@0.24.0
  #       with:
  #         image-ref: shurkys/opennebula-all-in-one:${{ github.ref_name }}
  #         format: sarif
  #         output: trivy-results.sarif
  #         severity: 'CRITICAL,HIGH'
  #       env:
  #         TRIVY_AUTH_URL: https://registry.hub.docker.com
  #         TRIVY_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  #         TRIVY_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
  #         TRIVY_PLATFORM: linux/arm64

  #     - name: ‚è´ Upload Trivy scan results to GitHub Security tab
  #       uses: github/codeql-action/upload-sarif@v3
  #       with:
  #         sarif_file: 'trivy-results.sarif'
  #         category: 'Container Scanning - Trivy'
  #         sha: ${{ github.sha }}
  #         ref: refs/heads/${{ github.head_ref || github.ref_name || 'main' }}
  #       continue-on-error: true
          
